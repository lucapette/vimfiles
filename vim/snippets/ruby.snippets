snippet require
require '${1}'
endsnippet
snippet def
def ${1:method_name}
  $0
end
endsnippet
snippet if
if ${1:condition}
  $0
end
endsnippet
snippet unless
unless ${1:condition}
  $0
end
endsnippet
snippet for
for ${1:element} in ${2:collection}
  $1$0
end
endsnippet
snippet class
class ${1:`!p res="".join(map(lambda x:x.capitalize(), snip.basename.split('_')))`}
  $0
end
endsnippet
snippet module
module ${1:`!p res="".join(map(lambda x:x.capitalize(), snip.basename.split('_')))`}
  $0
end
endsnippet
snippet init
def initialize ${1:args}
  $2
end
endsnippet
snippet r
attr_reader :${1:attribute}
endsnippet
snippet w
attr_writer :${1:attribute}
endsnippet
snippet rw
attr_accessor :${1:attribute}
endsnippet
snippet find
@${1:model} = ${1/\w+/\u$0/}.find(params[:${2:id}])$0
endsnippet
snippet map
map { |${1:e}| $1$0 }
endsnippet
snippet select
select { |${1:e}| $1$0 }
endsnippet
snippet each
each { |${1:e}| $1$0 }
endsnippet
snippet all
all? { |${1:e}| $1.${2:method}? }$0
endsnippet
snippet any
any? { |${1:e}| $1.${2:method}? }$0
endsnippet
snippet sort
sort { |${1:a}, ${2:b}| $1 <=> $2 }$3
endsnippet
snippet map!
map! { |${1:e}| $1$0 }
endsnippet
snippet sort!
sort! { |${1:a}, ${2:b}| $1 <=> $2 }$0
endsnippet
snippet sort_by
sort_by { |${1:e}| $1.$0 }
endsnippet
snippet sort_by!
sort_by! { |${1:e}| $1.$0 }
endsnippet
snippet times
times { |${1:e}| $1$0 }
endsnippet
snippet utf
# coding: UTF-8
endsnippet
snippet bm
Benchmark.bm do |x|
  x.report('${1:description}') { $0 }
end
endsnippet
snippet report
x.report('${1:description}') { $0 }
endsnippet
snippet gem
gem '${1:name}'$0
endsnippet
snippet log
logger.info(${1})
endsnippet
snippet flash
flash[:${1:notice}] = '${2:text}'
endsnippet
snippet scope "scope name condition"
scope :${1:name}, $0
endsnippet
snippet scope "scope name lambda"
scope :${1:name}, lambda { |${2:param}| $0 }
endsnippet
snippet accepts
accepts_nested_attributes_for :${1:association_name}$0
endsnippet
snippet with_options
with_options ${1:presence}: ${2:true} do |${3:f}|
  $3.$0
end
endsnippet
snippet belongs
  belongs_to :${1:item}$0
endsnippet
snippet	namespace
namespace :${1:admin} do
  $0
end
endsnippet
snippet describe
describe ${1:`!p res="".join(map(lambda x:x.capitalize(),snip.basename.split('_')))[0:-4]`} do
  $0
end
endsnippet
snippet it
it '${1:does}' do
  $0
end
endsnippet
snippet context
context '${1:context}' do
  $0
end
endsnippet
snippet before
before do
  $0
end
endsnippet
snippet new
@${1:model} = ${1/\w+/\u$0/g}.new$0
endsnippet
snippet factory
@${1:model} = Factory(:$1)$0
endsnippet
snippet build
@${1:model} = Factory.build(:$1)$0
endsnippet
