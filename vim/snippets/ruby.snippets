snippet require
require '${1}'
endsnippet
snippet def
def ${1:method_name}
  $0
end
endsnippet
snippet if
if ${1:condition}
  $0
end
endsnippet
snippet unless
unless ${1:condition}
  $0
end
endsnippet
snippet for
for ${1:element} in ${2:collection}
  $1$0
end
endsnippet
global !p
def classify(name):
  return "".join(map(lambda x:x.capitalize(), name.split('_')))
endglobal
snippet class
class ${1:`!p snip.rv=classify(snip.basename)`}
  $0
end
endsnippet
snippet module
module ${1:`!p snip.rv=classify(snip.basename)`}
  $0
end
endsnippet
snippet find "find" b
@${1:model} = ${2:`!p snip.rv=classify(t[1])`}.find params[:${3:id}]$0
endsnippet
snippet n "new" b
@${1:object} = ${2:`!p snip.rv=classify(t[1])`}.new$0
endsnippet
snippet @ "assignment" b
@${1:object} = $1$0
endsnippet
snippet init
def initialize ${1:args}
  $0
end
endsnippet
snippet r
attr_reader :${1:attribute}
endsnippet
snippet w
attr_writer :${1:attribute}
endsnippet
snippet rw
attr_accessor :${1:attribute}
endsnippet
snippet map "map" i
map { |${1:e}| $1$0 }
endsnippet
snippet select
select { |${1:e}| $1$0 }
endsnippet
snippet each "each" i
each { |${1:e}| $1$0 }
endsnippet
snippet all "all" i
all? { |${1:e}| $1.${2:method}? }$0
endsnippet
snippet any "any" i
any? { |${1:e}| $1.${2:method}? }$0
endsnippet
snippet sort "sort" i
sort { |${1:a}, ${2:b}| $1 <=> $2 }$3
endsnippet
snippet map! "map!" i
map! { |${1:e}| $1$0 }
endsnippet
snippet sort! "sort!" i
sort! { |${1:a}, ${2:b}| $1 <=> $2 }$0
endsnippet
snippet sort_by "sort_by" i
sort_by { |${1:e}| $1.$0 }
endsnippet
snippet sort_by! "sort_by!" i
sort_by! { |${1:e}| $1.$0 }
endsnippet
snippet utf
# coding: UTF-8
endsnippet
snippet # "#" i
#{$0}
endsnippet
snippet bm
Benchmark.bm do |x|
  x.report('${1:description}') { $0 }
end
endsnippet
snippet report
x.report('${1:description}') { $0 }
endsnippet
snippet gem
gem '${1:name}'$0
endsnippet
snippet group
group ${1::development} do
  $0
end
endsnippet
snippet log
logger.info(${1})
endsnippet
snippet flash
flash[:${1:notice}] = '${2:text}'
endsnippet
snippet scope "scope name condition"
scope :${1:name}, $0
endsnippet
snippet scope "scope name lambda"
scope :${1:name}, lambda { |${2:param}| $0 }
endsnippet
snippet accepts
accepts_nested_attributes_for :${1:association_name}$0
endsnippet
snippet with_options
with_options ${1:presence}: ${2:true} do |${3:f}|
  $3.$0
end
endsnippet
snippet belongs
  belongs_to :${1:item}$0
endsnippet
snippet	namespace
namespace :${1:admin} do
  $0
end
endsnippet
snippet pry
require 'pry'; binding.pry
endsnippet
snippet spec
require 'spec_helper'

describe ${1:`!p snip.rv=classify(snip.basename)[0:-4]`} do
  $0
end
endsnippet
snippet lite
require 'spec_helper_lite'
require_relative '$2'

describe ${1:`!p snip.rv=classify(snip.basename)[0:-4]`} do
  $0
end
endsnippet
snippet describe
describe '${1:description}' do
  $0
end
endsnippet
snippet it
it '${1:does}' do
  $0
end
endsnippet
snippet context
context '${1:context}' do
  $0
end
endsnippet
snippet should
should '${1:work}' do
  $0
end
endsnippet
snippet before
before do
  $0
end
endsnippet
snippet f "factory" b
@${1:model} = FactoryGirl.create(:$1)$0
endsnippet
snippet b "factory build" b
@${1:model} = FactoryGirl.build(:$1)$0
endsnippet
snippet Given
Given /^${1:description}$/ do
end
endsnippet
snippet Then
Then /^${1:description}$/ do
end
endsnippet
