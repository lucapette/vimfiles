snippet #!
	#!/usr/bin/env ruby
snippet require
	require '${1}'
snippet def
	def ${1:method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet case
	case ${1:condition}
	when ${2}
		${3}
	else
		${4}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
snippet for
	for ${1:element} in ${2:collection}
		$1${3}
	end
snippet class
	class ${1:`substitute(Filename(),'\v\C%([_]|<)(.)','\u\1','g')`}
		${2}
	end
snippet module
	module ${1:`substitute(Filename(),'\v\C%([_]|<)(.)','\u\1','g')`}
		${2}
	end
snippet init
	def initialize(${1:args})
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
snippet w
	attr_writer :${1:attr_names}
snippet rw
	attr_accessor :${1:attr_names}
snippet missing
	def method_missing(name, *args, &block)
		${1}
	end
snippet Array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet Hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet find
	find { |${1:e}| ${2}$1 }
snippet map
	map { |${1:e}| $1${2} }
snippet select
	select { |${1:e}| $1${2} }
snippet each
	each { |${1:e}| $1${2} }
snippet all
	all? { |${1:e}| $1.${2:method}?  }
snippet any
	any? { |${1:e}| $1.${2:method}?  }
snippet sort
	sort { |${1:a}, ${2:b}| $1 <=> $2 }${3}
snippet map!
	map! { |${1:e}| $1${2} }
snippet sort!
	sort! { |${1:a}, ${2:b}| $1 <=> $2 }${3}
snippet sort_by
	sort_by { |${1:e}| $1.${2:method} }
snippet sort_by!
	sort_by! { |${1:e}| $1.${2:method} }
snippet times
	times { |${1:e}| $1${2} }
snippet utf
	# coding: UTF-8
snippet bm
	Benchmark.bm do |x|
		x.report "${1:description}" { ${2} }
	end
snippet report
	x.report "${1:description}" { ${2} }
snippet gem
	gem '${1:name}'
snippet log
	logger.info("${1}")
snippet flash
	flash[:${1:notice}] = "${2:text}"
snippet scope scope name condition
	scope :${1:name}, ${2:condition}
snippet scope scope name lambda
	scope :${1:name}, lambda { |${2:param}| ${3:function} }
snippet redirect path
	redirect_to ${1:path}
snippet redirect message
	redirect_to ${1:path}, :${2:notice} => "${3:message}"
snippet accepts
	accepts_nested_attributes_for :${1:association_name}
snippet one
	has_one	:${1:item}
snippet many
	has_many :${1:items}
snippet belongs
	belongs_to :${1:item}
snippet	namespace
	namespace :${1:admin} do
		${2}
	end
snippet infinity
	infinity_test do
	   use :rubies => %w(1.8.7 1.9.2), :test_framework => :rspec
	   notifications :lib_notify do
		  show_images :mode => :rubies
	   end
	end
snippet describe
	describe "${1:subject}" do
		${2}
	end
snippet it
	it "${1:does}" do
		${2}
	end
snippet context
	context "${1:context}" do
		${2}
	end
snippet before
	before(:each) do
		${1}
	end
