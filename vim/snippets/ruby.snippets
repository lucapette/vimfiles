# #!/usr/bin/ruby
snippet #!
	#!/usr/bin/ruby
snippet require
	require "${1}"
snippet def
	def ${1:method_name}
		${2}
	end
snippet if if
	if ${1:condition}
		${2}
	end
snippet if if else
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
snippet for
	for ${1:element} in ${2:collection}
		${3} $1
	end
snippet class
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet init
	def initialize(${1:args})
		${2}
	end
snippet module
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet r
	attr_reader :${1:attr_names}
snippet w
	attr_writer :${1:attr_names}
snippet rw
	attr_accessor :${1:attr_names}
snippet missing
	def method_missing(name, *args, &block)
		${1}
	end
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet log
	logger.info("${1}")
snippet debug
	logger.debug("${1:message}")
snippet warn
	logger.warn("${1:message}")
snippet error
	logger.error("${1:message}")
snippet fatal
	logger.fatal( "${1:message}")
snippet flash
	flash[:${1:notice}] = "${2:text}"
snippet map
	map {|${1:e}| ${2} $1 }
snippet select
	select {|${1:e}| ${2} $1 }
snippet each
	each { |${1:e}| ${2} $1 }
snippet sort
	sort { |${1:a}, ${2:b}| $1 <=> $2 }
snippet sort_by
	sort_by { |${1:e}| $1.${2:method} }
snippet all
	all? { |${1:e}| $1.${2:method}?  }
snippet any
	any? { |${1:e}| $1.${2:method}?  }
snippet find
	@${1:item} = ${2:Model}.find(params[:${3:id}])
snippet scope scope name condition
	scope :${1:name}, ${2:condition}
snippet scope scope name lambda
	scope :${1:name}, lambda { |${2:param}| ${3:function} }
snippet utf
	# coding: UTF-8
snippet redirect path
	redirect_to ${1:path}
snippet redirect message
	redirect_to ${1:path}, :${2:notice} => "${3:message}"
snippet accepts
	accepts_nested_attributes_for :${1:association_name}
